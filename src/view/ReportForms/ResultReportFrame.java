/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.ReportForms;

import dao.QuestionDao;
import helper.JDBC_Connection;
import helper.TableCellRenderHelper;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Question;

/**
 *
 * @author Nguyen Hai Dang
 */
public class ResultReportFrame extends javax.swing.JFrame {

    private List _dataList;
    Connection _connector;

    /**
     * Creates new form ResultReportFrame
     */
    public ResultReportFrame(List dataList) {
        initComponents();
        _dataList = dataList;
        _connector = JDBC_Connection.getPublisherConnection();
        loadDataInfo();
        loadDataTable();
    }

    public ResultReportFrame() {
        initComponents();
    }

    private void loadDataInfo() {
        classLabel.setText(": " + _dataList.get(2).toString());
        nameLabel.setText(": " + _dataList.get(1).toString());
        subjectLabel.setText(": " + _dataList.get(3).toString());
        dateLabel.setText(": " + new SimpleDateFormat("dd/MM/yyyy").format(_dataList.get(5)));
        examTimeLabel.setText(_dataList.get(4).toString());
    }

    private void loadDataTable() {
        dataTable.setShowGrid(true);
        dataTable.getColumnModel().getColumn(3).setCellRenderer(new TableCellRenderHelper());
        dataTable.getColumnModel().getColumn(2).setCellRenderer(new TableCellRenderHelper());

        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setNumRows(0);

//        List<Vector> questionList = extractExamToListQuestion(_dataList.get(6).toString());
//        for (Vector vt : questionList) {
//            Question question = new QuestionDao().getQuestionById(Integer.valueOf(vt.get(0).toString()));
//            Vector data = new Vector();
//            data.add(model.getRowCount() + 1);
//            data.add(question.getCauHoi());
//            data.add(question.getNoiDung());
//            data.add(String.format("A: %s\nB: %s\nC: %s\nD: %s",
//                    question.getA(), question.getB(), question.getC(), question.getD()));
//            data.add(question.getDapAn());
//            data.add(vt.get(1));
//            model.addRow(data);
//        }
        String sql = "{call dbo.SP_Xem_Ket_Qua(?)}";
        int examID = Integer.valueOf(_dataList.get(6).toString());
        try {
            PreparedStatement ps = _connector.prepareStatement(sql);
            ps.setInt(1, examID);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Question question = new QuestionDao().getQuestionById(rs.getInt("CAUHOI"));
                Vector data = new Vector();
                
                data.add(rs.getInt("STT"));
                data.add(question.getCauHoi());
                data.add(question.getNoiDung());
                data.add(String.format("A: %s\nB: %s\nC: %s\nD: %s",
                        question.getA(), question.getB(), question.getC(), question.getD()));
                data.add(question.getDapAn());
                data.add(rs.getString("DACHON"));
                model.addRow(data);
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    private List<Vector> extractExamToListQuestion(String exam) {
        List<Vector> result = new ArrayList<Vector>();
        String tmp[] = exam.split("-");
        for (int i = 0; i < tmp.length; i++) {
            Vector question = new Vector();
            String answer[] = tmp[i].split(":");
            question.add(answer[0]);
            question.add(answer[1]);
            result.add(question);
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        examTimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Câu số", "Nội dung", "Các chọn lựa", "Đáp án", "Đã chọn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setResizable(false);
            dataTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            dataTable.getColumnModel().getColumn(1).setResizable(false);
            dataTable.getColumnModel().getColumn(1).setPreferredWidth(30);
            dataTable.getColumnModel().getColumn(2).setResizable(false);
            dataTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            dataTable.getColumnModel().getColumn(3).setResizable(false);
            dataTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            dataTable.getColumnModel().getColumn(4).setResizable(false);
            dataTable.getColumnModel().getColumn(4).setPreferredWidth(30);
            dataTable.getColumnModel().getColumn(5).setResizable(false);
            dataTable.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Lớp");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Họ tên");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Môn thi");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Ngày thi");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Lần thi :");

        classLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        classLabel.setText("classLabel");

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameLabel.setText("nameLabel");

        subjectLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subjectLabel.setText("subjectLabel");

        dateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLabel.setText("dateLabel");

        examTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        examTimeLabel.setText("##");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(55, 55, 55)
                                .addComponent(classLabel)))
                        .addGap(273, 273, 273)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(examTimeLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subjectLabel)
                            .addComponent(nameLabel))))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(classLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(subjectLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(dateLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(examTimeLabel)))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultReportFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classLabel;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel examTimeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel subjectLabel;
    // End of variables declaration//GEN-END:variables
}
